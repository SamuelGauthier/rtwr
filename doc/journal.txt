2017-09-06 10:00 Meeting with supervisor

* The chosen topic is an advanced one and very broad.
* Take into account the level of details (LOD)
* Screen (pixel) space or vertex space?
* First search what methods exist (preferably simple ones) and group them.
  (=1/3 of the work ~2 weeks)
  Select a couple of methods, go into them in greater depth. (1/3 of work)
  The work done should lead to a vision for the bcs thesis. (1/3)
  If there is already a short demo/result, it is a +.
* Decide what technology to use: SLProject, 0 a.d. engine, Unity or custom
  solution? Look carefully to see if the 0 a.d. engine is worth it: code
  complexity, readability. Is it easy to add a functionality? Is it possible
  to launch the engine with a single plane and one object, i.e. without GUI
  and unnecessary stuff.
* For Unity there is AQUAS or Ceto.
* Communicate with the devs of 0 a.d. to know what shader language they use
  (GLSL if they use OpenGL, HLSL). Also ask them about the expected
  performance.
* Document the facts, what has been done (like a scientific paper).
* Is the documentation well made it shouldn't take weeks to implement the
  proposed solution.

2017-09-08 10:00 Research material

I found a lot of interesting papers about water rendering in realtime. The
most interesting one is "Large-scale interactive water simulation with
directional waves" presented at SIGGRAPH 2017. It claims to accurately render
in realtime a 4km times 4km map of water with objects. Unfortunately only
a summary and video is available at the moment. Other interesting findings are
"Water Technology of Uncharted", "Sea Surface Visualization in World of
Warships", "Water Flow in Portal 2", "Water Wave Packets", "Real-Time
Interactive Fluid Animation Technique based on Linear Convolution", "Realistic
Water Volumes in Real-Time".

2017-09-09 16:00 Started skimming through papers

Created a list with relevant papers and material. Found a presentation about
the water rendering in World of Warships that seems more accurate than the
method from "Large-Scale Interactive Water Simulation With Directional Waves".
I watched the conference presentation from the latter but it wasn't
convincing. There is still a lot of material to understand and analyze.

2017-09-11 10:00 Reading papers
Today I began to read the presentation of Naughty Dog about the water
rendering in Uncharted 3. There is a lot of material that I don't understand
yet. But they provided additional and interesting references. I updated my
documentation file accordingly. I also found a nice tutorial about OpenGL
which I will begin tomorrow.

2017-09-12 10:00 Uncharted 3 and OpenGL

- Finished to read the Uncharted 3 presentation. Not quite understood
  everything. Added some more found references.
- Started an OpenGL tutorial.

2017-09-15 13:00 Compile 0 a.d.

Tried to compile 0 A.D. and got linker error with nghttp2 and libcurl. The
Alpha 21 compiled seamlessly but the 22 does not.

2017-09-16 15:00 Built 0 a.d.
successfully, error with SLProject

After many attempts I could compile 0 a.d. at last. I added
the "--without-nghttp2" option to the library build shell script.
I have now trouble to compile SLProject because of webp even if it is
installed. I have to remember which trick I used to compile it some time ago.

2017-09-19 22:19 Contacted the responsible person about water rendering in 0 a.d.

2017-09-20 13:19 Read the presentation about water rendering in World of Warships, continued the OpenGl tutorial

* The main idea they had is to add two more stages to the water rendering
  process in between Mesh generation and Optical based shading (Wave synthesis
  -> Mesh generation -> Optical based shading). This two stages are:
  "Per-pixel improving" and "Sub-pixel calculation". The have a new reflection
  and shadow formula.
  They use three different heightmaps, a special anti-aliasing method based on
  Newton's method and a projection grid.
* Continued the OpenGL tutorial and displayed my first red triangle.

2017-09-21 22:23 Began to read the Project Grid Concept for water rendering

Almost every solution implemented in the game industry references this master
thesis. The main idea is to use a plane which has different level of details
and use a generated perlin noise texture as a heightmap.
